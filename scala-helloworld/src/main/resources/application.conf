# In this file you can override any option defined in the reference files.
# Copy in parts of the reference files and modify as you please.
 
akka {
 
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]
 
  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"
 
  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"
 
  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  #logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
 
  actor {
  
    default-dispatcher {
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 10
    }
    
    #definition of an dispatcher...
    my-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
	  type = Dispatcher
	  # What kind of ExecutionService to use
	  executor = "fork-join-executor"
	  # Configuration for the fork join pool
	  fork-join-executor {
	    # Min number of threads to cap factor-based parallelism number to
		parallelism-min = 2
		# Parallelism (threads) ... ceil(available processors * factor)
		parallelism-factor = 2.0
		# Max number of threads to cap factor-based parallelism number to
		parallelism-max = 10
	  }
	  # Throughput defines the maximum number of messages to be
	  # processed per actor before the thread jumps to the next actor.
	  # Set to 1 for as fair as possible.
	  throughput = 100
    }
    
    #definition other dispatcher
    my-thread-pool-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
      # Configuration for the thread pool
      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 2
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 2.0
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 10
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }
    
    #Dispatcher with fixed thread pool size eg for actors that perform blocking IO
    blocking-io-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor" 
      thread-pool-executor {
        fixed-pool-size = 32
      }
      throughput = 1
    }
    
    my-pinned-dispatcher {
      executor = "thread-pool-executor"
      type = PinnedDispatcher
    }
    
    bounded-mailbox {
      mailbox-type = "akka.dispatch.BoundedMailbox"
      mailbox-capacity = 1000
      mailbox-push-timeout-time = 10s
    }
    
    prio-dispatcher {
      mailbox-type = "docs.dispatcher.DispatcherDocSpec$MyPrioMailbox"
      //Other dispatcher configuration goes here
    }
    
    prio-mailbox {
      mailbox-type = "docs.dispatcher.DispatcherDocSpec$MyPrioMailbox"
      //Other dispatcher configuration goes here
    }
    
    control-aware-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
      //Other dispatcher configuration goes here
    }
    
    custom-dispatcher {
      mailbox-type = "br.edu.ufcg.ic.akka.java.mailboxes.MyUnboundedJMailbox"
    }
  }
  
  #bridge beetwen an actor and actor's dispatcher
  akka.actor.deployment {
    /myactor {
      dispatcher = my-dispatcher
    }
    /priomailboxactor {
      mailbox = prio-mailbox
    }
    /router1 {
      router = round-robin-pool
      nr-of-instances = 5
    }
    
    /router3 {
      router = round-robin-group
      routees.paths = ["/user/workers/w1", "/user/workers/w2", "/user/workers/w3"]
	}
	
	/router5 {
      router = random-pool
      nr-of-instances = 5
    }
    
    /router7 {
      router = random-group
      routees.paths = ["/user/workers/w1", "/user/workers/w2", "/user/workers/w3"]
    }
    
    /router29 {
      router = round-robin-pool
      resizer {
        lower-bound = 2
        upper-bound = 15
        messages-per-resize = 100
      }
    }
    /redundancy2 {
      router = "br.edu.ufcg.ic.akka.java.routing.RedundancyGroup"
      routees.paths = ["/user/s1", "/user/s2", "/user/s3"]
      nbr-copies = 5
    }
  }
  
  akka.actor.mailbox.requirements {
    "akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
  }
 
  remote {
    # The port clients should connect to. Default is 2552.
    netty.tcp.port = 4711
  }
}